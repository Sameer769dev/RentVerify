// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Recommends similar listings based on user preferences and search history.
 *
 * - recommendListings - A function that handles the listing recommendation process.
 * - RecommendListingsInput - The input type for the recommendListings function.
 * - RecommendListingsOutput - The return type for the recommendListings function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendListingsInputSchema = z.object({
  userPreferences: z
    .string()
    .describe('The user\u2019s preferences, including desired location, price range, number of bedrooms, and amenities.'),
  searchHistory: z
    .string()
    .describe('A summary of the user\u2019s past searches and viewed properties, including location, price range, and property types.'),
  currentListingDescription: z
    .string()
    .optional()
    .describe('The description of the currently viewed listing, if applicable.'),
});
export type RecommendListingsInput = z.infer<typeof RecommendListingsInputSchema>;

const RecommendListingsOutputSchema = z.object({
  recommendations: z
    .string()
    .describe('A list of recommended listings, including their descriptions and reasons for recommendation.'),
});
export type RecommendListingsOutput = z.infer<typeof RecommendListingsOutputSchema>;

export async function recommendListings(input: RecommendListingsInput): Promise<RecommendListingsOutput> {
  return recommendListingsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'recommendListingsPrompt',
  input: {schema: RecommendListingsInputSchema},
  output: {schema: RecommendListingsOutputSchema},
  prompt: `You are an expert rental recommendation agent.

  Based on the user's preferences, search history, and the current listing they are viewing, you will recommend similar listings.

  User Preferences: {{{userPreferences}}}
  Search History: {{{searchHistory}}}
  Current Listing Description: {{{currentListingDescription}}}

  Provide a detailed list of recommended listings, including their descriptions and reasons for recommendation.
  Format the response as a list of listing descriptions with a short reason for the recommendation after each.
  `,
});

const recommendListingsFlow = ai.defineFlow(
  {
    name: 'recommendListingsFlow',
    inputSchema: RecommendListingsInputSchema,
    outputSchema: RecommendListingsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
